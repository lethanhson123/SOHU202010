@{
    ViewData["Title"] = "Danh mục menu hệ thống";
}
@using Kendo.Mvc.UI
@using SOHU.Data.Models
<section class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1>Danh mục chức năng hệ thống</h1>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="#">Phân quyền</a></li>
                    <li class="breadcrumb-item active"><a class="text-primary" asp-action="Index" asp-controller="Menu">Menu</a></li>
                </ol>
            </div>
        </div>
    </div>
</section>
<section class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="card" style="overflow-x:auto;">
                @(Html.Kendo().Grid<SOHU.Data.Models.Menu>()
                .Name("Menu")
                .Columns(columns =>
                {
                    columns.Command(command => {
                        command.Edit().Text("&nbsp;").CancelText("&nbsp;").UpdateText("&nbsp;").IconClass("fas fa-edit").HtmlAttributes(new { style = "padding-top:6px; padding-left:15px; border-radius: 6px; width:50px; font-weight:bold; color:black;" });
                        command.Custom("detailFirst").Text("&nbsp;").IconClass("fas fa-external-link-alt").Click("onOpenDetail").HtmlAttributes(new { style = "color:#ffffff; background-color:#28a745; padding-top:10px; border-radius: 6px; width:50px;", @class = "btn btn-success" });
                        command.Destroy().Text("&nbsp;").IconClass("fas fa-trash").HtmlAttributes(new { style = "color:#ffffff; background-color:#d73925; padding-top:10px; border-radius: 6px; width:50px;", @class = "btn btn-danger" });
                    }).Width(250);
                    columns.Bound(t => t.ID).Title("ID").Width(100).HtmlAttributes(new { style = "text-align:right;" });
                    columns.Bound(t => t.ParentID).Title("Nhóm").Width(100);
                    columns.Bound(t => t.DisplayName).Title("Hiển thị").Width(350);
                    columns.Bound(t => t.Icon).Title("Biểu tượng").Width(200);
                    columns.Bound(t => t.Controller).Title("Controller").Width(300);
                    columns.Bound(t => t.Action).Title("Action").Width(300);
                    columns.Bound(t => t.SortOrder).Title("Sắp xếp").Width(300);
                    columns.Bound(t => t.MenuLeft).Title("Menu left").ClientTemplate("<input type='checkbox' readonly #= MenuLeft ? checked='checked' : '' #/>").Width(100);
                    columns.Bound(t => t.MenuBasic).Title("Menu cơ bản").ClientTemplate("<input type='checkbox' readonly #= MenuBasic ? checked='checked' : '' #/>").Width(100);
                    columns.Bound(t => t.Note).Title("Ghi chú").Width(400);
                    columns.Command(command =>
                    {
                        command.Edit().Text("&nbsp;").CancelText("&nbsp;").UpdateText("&nbsp;").IconClass("fas fa-edit").HtmlAttributes(new { style = "padding-top:6px; padding-left:15px; border-radius: 6px; width:50px; font-weight:bold; color:black;" });
                        command.Custom("detailLast").Text("&nbsp;").IconClass("fas fa-external-link-alt").Click("onOpenDetail").HtmlAttributes(new { style = "color:#ffffff; background-color:#d73925; padding-top:10px; border-radius: 6px; width:50px;", @class = "btn btn-success" });
                        command.Destroy().Text("&nbsp;").IconClass("fas fa-trash").HtmlAttributes(new { style = "color:#ffffff; background-color:#d73925; padding-top:10px; border-radius: 6px; width:50px;", @class = "btn btn-danger" });
                    }).Width(250);
                })
                .ToolBar(toolBar => toolBar.Create().Text("&nbsp").IconClass("fas fa-plus").HtmlAttributes(new { style = "border-radius: 6px; font-weight:bold; background-color:#009966; color:#ffffff; padding-left:16px;" }))
                .ToolBar(toolBar => toolBar.Search())
                .Editable(editable => editable.Mode(GridEditMode.InLine))
                .Sortable()
                .Scrollable()
                .Reorderable(r => r.Columns(true))
                .Resizable(r => r.Columns(true))
                .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(true)
                .ButtonCount(10))
                .Excel(excel => excel
                .FileName("CauHinh.xlsx")
                .Filterable(true)
                .ProxyURL(Url.Action("ExportExcel", "CauHinh")))
                .Pdf(pdf => pdf
                .AllPages()
                .AvoidLinks()
                .PaperSize("A4")
                .Margin("2cm", "1cm", "1cm", "1cm")
                .Landscape()
                .RepeatHeaders()
                .FileName("CauHinh.pdf"))
                .Search(search=> {
                    search.Field(f => f.Controller);
                    search.Field(f => f.Action);
                    search.Field(f => f.DisplayName);
                    search.Field(f => f.Note);
                })
                .DataSource(dataSource => dataSource
                .Ajax()
                .PageSize(1000)
                .Model(model =>
                {
                    model.Id(t => t.ID);
                    model.Field(t => t.ID).Editable(false);
                })
                .Events(t => { t.RequestEnd("onGridRequestEnd"); })
                .Read(t => t.Action("GetAllToList", "Menu"))
                .Destroy(t => t.Action("Delete", "Menu"))
                .Create(t => t.Action("Create", "Menu"))
                .Update(t => t.Action("Update", "Menu"))))
            </div>
        </div>
    </div>
</section>
<script>

    function onGridRequestEnd(e) {
        if ((e.type == "create") || (e.type == "update") || (e.type == "destroy")) {
            var response = e.response;
            var messageType = response.split('-')[0];
            var note = response.split('-')[1];
            Notify(messageType.trim(), note);
            $("#Menu").data("kendoGrid").dataSource.read();
        }
    }

    function Notify(type, message) {
        switch (type) {
            case "success":
                toastr.success(message);
                break;
            case "info":
                toastr.info(message);
                break;
            case "error":
                toastr.error(message);
                break;
            case "warning":
                toastr.warning(message);
                break;
        }
    }

    function onOpenDetail(e) {
        var item = this.dataItem($(e.currentTarget).closest("tr"));
        var url = "@Url.Action("Detail","Menu")?ID=" + item.ID;
        window.location.href = url;
    }

</script>